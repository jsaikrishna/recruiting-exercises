<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Red Hat Summit 2019 Labs: Integration and APIs roadmap</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/HCPGzuSPxoo/" /><category term="Cloud" /><category term="Events" /><category term="Integration" /><category term="Products" /><category term="Red Hat Summit" /><category term="Agile Integration" /><category term="API" /><category term="containers" /><category term="hybrid cloud" /><category term="microservices" /><category term="red hat summit" /><category term="summit labs" /><author><name>Eric D. Schabell</name></author><id>https://developers.redhat.com/blog/?p=585877</id><updated>2019-04-12T15:00:07Z</updated><published>2019-04-12T15:00:07Z</published><content type="html">&lt;p&gt;&lt;a href="https://www.redhat.com/en/summit/2019" target="_blank" rel="noopener noreferrer"&gt;Red Hat Summit 2019&lt;/a&gt; is rocking Boston, MA from May 7-9 in the &lt;a href="https://www.signatureboston.com/BCEC" target="_blank" rel="noopener noreferrer"&gt;Boston Convention and Exhibition Center&lt;/a&gt;. Everything you need to know about the current state of open source enterprise-ready software can be found at this event. From customers talking about their experiences leveraging open source in their solutions, to the creators of open source technologies you&amp;#8217;re using, and all the way down to hands-on lab experiences on these technologies.&lt;/p&gt; &lt;p&gt;This hands-on appeal is what this series of articles is about. Previously, we looked at the &lt;a href="https://developers.redhat.com/blog/2019/03/31/red-hat-summit-2019-labs-cloud-native-app-dev-roadmap/"&gt;labs in the Cloud-Native App Dev track&lt;/a&gt;, and this time, we provide a roadmap to the &amp;#8220;Integration and APIs&amp;#8221; lab content.&lt;/p&gt; &lt;p&gt;&lt;span id="more-585877"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;The following labs can be found in the &lt;a href="https://summit.redhat.com/conference/sessions" target="_blank" rel="noopener noreferrer"&gt;session catalog online&lt;/a&gt;, by searching on title or filtering on &amp;#8220;instructor-led lab&amp;#8221; and &amp;#8220;Integration &amp;#38; APIs.&amp;#8221;&lt;/p&gt; &lt;h3&gt;Agile integration with APIs and containers workshop&lt;/h3&gt; &lt;p&gt;The agile integration with APIs and containers session is a hands-on workshop for developing, testing, and deploying integrated cloud-native solutions.&lt;/p&gt; &lt;p&gt;This 2-hour lab will start with an overview of agile integration and a discussion of the necessary architecture. We’ll also present examples of how customers are using Red Hat’s agile integration methodology to stay competitive. This hands-on workshop is designed for integrators who will be leading the activities of API development and security. These activities are UI-driven and allow the integrator to successfully deploy, integrate, (Red Hat Fuse), secure, and manage API services. We&amp;#8217;ll also cover accelerating the development of cloud-native applications, developing API-centric services, providing API security, and establishing operational management.&lt;br /&gt; &lt;i&gt;&lt;br /&gt; &lt;/i&gt;&lt;i&gt;Speakers: Simon Green, Yossi Koren, Christina WeiMei Lin, Vinay Bhalerao&lt;/i&gt;&lt;/p&gt; &lt;h3&gt;Agile integration for the enterprise&lt;/h3&gt; &lt;p&gt;Organizations invest in a deep portfolio of technologies to meet diverse business requirements. The interconnectivity of these systems is fundamental to the success of the business. To keep pace with the competition, solutions must achieve scalability to meet market demand, as well as to meet business stakeholder requirements. Agile integration is the key to the success of organizations seeking to scale and support demanding stakeholder expectations.&lt;/p&gt; &lt;p&gt;In this lab, you&amp;#8217;ll learn to use Red Hat’s integration portfolio for various use cases, including:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Integrating applications without coding.&lt;/li&gt; &lt;li&gt;Implementing advanced integration scenarios that use multiple backend services.&lt;/li&gt; &lt;li&gt;Becoming fluent with a variety of deployment methodologies.&lt;/li&gt; &lt;li&gt;Building fault-tolerant microservices applications.&lt;/li&gt; &lt;li&gt;Facilitating integration to legacy systems, by exposing these systems as microservices.&lt;/li&gt; &lt;li&gt;Designing, exposing, and managing REST APIs.&lt;/li&gt; &lt;li&gt;Applying service-level agreements to microservices monitoring.&lt;/li&gt; &lt;li&gt;Using cloud-native infrastructure to host a highly available integration solution.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You&amp;#8217;ll get hands-on experience with Red Hat Fuse Online, Red Hat Fuse for OpenShift Container Platform, Red Hat Fuse for Red Hat JBoss Enterprise Application Platform (EAP), ISTIO, Red Hat 3scale API Management, and Red Hat OpenShift Application Runtimes.&lt;/p&gt; &lt;p&gt;&lt;i&gt;Speakers: Andrew Block, Chad Darby, Hong Hua Chin&lt;/i&gt;&lt;/p&gt; &lt;h3&gt;Bridging microservice boundaries with Apache Kafka and Debezium&lt;/h3&gt; &lt;p&gt;Domain-driven design suggests splitting large systems into bounded contexts. Implemented by independent teams as loosely coupled microservices, this pattern lets organizations adapt to new business requirements quickly. While they shouldn’t share resources such as a common database, services don’t exist in isolation either: often one service needs data from another for providing its functionality.&lt;/p&gt; &lt;p&gt;In this lab. we&amp;#8217;ll cover:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;How microservices can share data using Apache Kafka while maintaining proper isolation and independence.&lt;/li&gt; &lt;li&gt;How to use change data capture (CDC) to stream data changes directly out of a database, without any application changes needed.&lt;/li&gt; &lt;li&gt;How to propagate the data owned by a microservice to sync systems such as caches and full-text search indexes.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Based on Red Hat OpenShift, Red Hat AMQ streams, Kafka, and Debezium, an open source CDC solution. This hands-on lab will guide you through the steps to successfully implement asynchronous data exchange patterns between your microservices.&lt;/p&gt; &lt;p&gt;&lt;i&gt;Speakers: Emmanuel Bernard, Gunnar Morling, Marius Bogoevici, Paolo Patierno&lt;/i&gt;&lt;/p&gt; &lt;h3&gt;Learning to use the Camel Rest DSL with 3scale and OpenShift&lt;/h3&gt; &lt;p&gt;This lab will give an introduction to the open source integration framework Apache Camel, the upstream project for Red Hat Fuse, as well as Red Hat 3scale API Automation and Red Hat OpenShift Container Platform. You&amp;#8217;ll learn Camel basics and be walked through developing and deploying a route with Spring Boot. We&amp;#8217;ll also cover how to use Camel with OpenShift Container Platform and 3Scale API Automation to have web-scale applications and with fully managed APIs. Due to the common need for REST APIs in enterprise applications, we&amp;#8217;ll cover how to start writing a REST Camel route using examples of the Camel REST DSL.&lt;/p&gt; &lt;p&gt;Come learn how to deploy camel routes onto OpenShift Container Platform and set up API management using 3scale API Management to manage your API usage, URLs, and more.&lt;br /&gt; &lt;i&gt;&lt;br /&gt; Speakers: Claus Ibsen, Mary Cochran, Dusty Humphries&lt;/i&gt;&lt;/p&gt; &lt;h3&gt;Navigating hybrid cloud integration—a hackathon&lt;/h3&gt; &lt;p&gt;Be innovative and create your own hybrid integration solution with Red Hat integration technology to solve day-to-day integration challenges. You&amp;#8217;ll be handed a set of integration problems to choose from and have access to Red Hat Fuse, Red Hat&amp;#8217;s integration platform. You can work individually or in groups to build your integration solution on top of it. Common challenges include connecting to brownfield system, SaaS applications, handling streaming of events, and providing APIs.&lt;/p&gt; &lt;p&gt;&lt;i&gt;Speaker: Gary Gaughan, Nicola Ferraro, Christina WeiMei Lin, Evan Shortiss, Hugo Guerrero Olivares&lt;/i&gt;&lt;i&gt;&lt;br /&gt; &lt;/i&gt;&lt;/p&gt; &lt;h3&gt;Running Apache Kafka on OpenShift with AMQ streams&lt;/h3&gt; &lt;p&gt;In this lab, you’ll learn the practical aspects of deploying, operating, and interacting with an Apache Kafka cluster on Red Hat OpenShift Container Platform thanks to Red Hat AMQ streams. We&amp;#8217;ll cover how to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Manage Apache Kafka clusters, topics, and users on OpenShift Container Platform using the AMQ streams operators and Kubernetes custom resources (CRDs).&lt;/li&gt; &lt;li&gt;Self-service your Kafka clusters, topics, and users by monitoring specific projects.&lt;/li&gt; &lt;li&gt;Create persistent Kafka clusters using persistent volume.&lt;/li&gt; &lt;li&gt;Interact with your Kafka cluster from both within and outside the OpenShift Container Platform instance, using a set of sample applications.&lt;/li&gt; &lt;li&gt;Manage and monitor your Kafka clusters, using Grafana and Prometheus.&lt;/li&gt; &lt;li&gt;Implement a cross-datacenter solution using MirrorMaker deployed by the AMQ streams cluster operator.&lt;/li&gt; &lt;li&gt;Handle cluster and clients TLS certificates for encryption and authentication.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;i&gt;Speaker: Marius Bogoevici, Paolo Patierno, Emmanuel Bernard, Gunnar Morling&lt;/i&gt;&lt;/p&gt; &lt;p&gt;Register now for one of these instructor-led labs at &lt;a href="https://www.redhat.com/en/summit/2019"&gt;Red Hat Summit 2019&lt;/a&gt;. We look forward to seeing you there!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Fred-hat-summit-2019-labs-integration-and-apis-roadmap%2F&amp;#38;linkname=Red%20Hat%20Summit%202019%20Labs%3A%20Integration%20and%20APIs%20roadmap" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Fred-hat-summit-2019-labs-integration-and-apis-roadmap%2F&amp;#38;linkname=Red%20Hat%20Summit%202019%20Labs%3A%20Integration%20and%20APIs%20roadmap" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Fred-hat-summit-2019-labs-integration-and-apis-roadmap%2F&amp;#38;linkname=Red%20Hat%20Summit%202019%20Labs%3A%20Integration%20and%20APIs%20roadmap" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Fred-hat-summit-2019-labs-integration-and-apis-roadmap%2F&amp;#38;linkname=Red%20Hat%20Summit%202019%20Labs%3A%20Integration%20and%20APIs%20roadmap" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Fred-hat-summit-2019-labs-integration-and-apis-roadmap%2F&amp;#38;linkname=Red%20Hat%20Summit%202019%20Labs%3A%20Integration%20and%20APIs%20roadmap" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Fred-hat-summit-2019-labs-integration-and-apis-roadmap%2F&amp;#38;linkname=Red%20Hat%20Summit%202019%20Labs%3A%20Integration%20and%20APIs%20roadmap" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Fred-hat-summit-2019-labs-integration-and-apis-roadmap%2F&amp;#38;linkname=Red%20Hat%20Summit%202019%20Labs%3A%20Integration%20and%20APIs%20roadmap" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Fred-hat-summit-2019-labs-integration-and-apis-roadmap%2F&amp;#38;linkname=Red%20Hat%20Summit%202019%20Labs%3A%20Integration%20and%20APIs%20roadmap" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Fred-hat-summit-2019-labs-integration-and-apis-roadmap%2F&amp;#038;title=Red%20Hat%20Summit%202019%20Labs%3A%20Integration%20and%20APIs%20roadmap" data-a2a-url="https://developers.redhat.com/blog/2019/04/12/red-hat-summit-2019-labs-integration-and-apis-roadmap/" data-a2a-title="Red Hat Summit 2019 Labs: Integration and APIs roadmap"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/04/12/red-hat-summit-2019-labs-integration-and-apis-roadmap/"&gt;Red Hat Summit 2019 Labs: Integration and APIs roadmap&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/HCPGzuSPxoo" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Red Hat Summit 2019 is rocking Boston, MA from May 7-9 in the Boston Convention and Exhibition Center. Everything you need to know about the current state of open source enterprise-ready software can be found at this event. From customers talking about their experiences leveraging open source in their solutions, to the creators of open [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/04/12/red-hat-summit-2019-labs-integration-and-apis-roadmap/"&gt;Red Hat Summit 2019 Labs: Integration and APIs roadmap&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/04/12/red-hat-summit-2019-labs-integration-and-apis-roadmap/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">585877</post-id><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-04-12T15:00:07Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/04/12/red-hat-summit-2019-labs-integration-and-apis-roadmap/</feedburner:origLink></entry><entry><title>Long 2h Apache Camel video (sorry it's in danish)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/64amRTLKpeo/long-2h-apache-camel-video-sorry-its-in.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="Knative" scheme="searchisko:content:tags" /><category term="roadmap" scheme="searchisko:content:tags" /><category term="video" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-long_2h_apache_camel_video_sorry_it_s_in_danish</id><updated>2019-04-12T08:14:56Z</updated><published>2019-04-12T08:14:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;A couple of days ago I was back in Copenhagen, at the capital region IT division for health care, where my Apache Camel journey &lt;a href="http://www.davsclaus.com/2008/07/apache-camel-140-released.html"&gt;started in 2008&lt;/a&gt;. So it was great being back at that magical place ;)&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-XogT6nBe2bg/XLBGBfGV_cI/AAAAAAAAB54/v2Y41MWPMqI6IlOMb82vQqyhHKxe8BtBACLcBGAs/s1600/IMG_9245.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="256" data-original-width="192" src="https://2.bp.blogspot.com/-XogT6nBe2bg/XLBGBfGV_cI/AAAAAAAAB54/v2Y41MWPMqI6IlOMb82vQqyhHKxe8BtBACLcBGAs/s1600/IMG_9245.jpg" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The event was hosted by &lt;a href="https://javagruppen.dk/2019/03/12/camel-k-gaa-hjem-mode.html"&gt;Javagruppen&lt;/a&gt; and they had video equipment so they streamed the event live on youtube.&lt;br /&gt;&lt;br /&gt;The agenda of my 2 hour session was:&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;What is Apache Camel?&lt;/li&gt;&lt;li&gt;Apache Camel v3&lt;/li&gt;&lt;li&gt;Apache Camel K&lt;/li&gt;&lt;li&gt;Knative &amp;amp; Camel&lt;/li&gt;&lt;li&gt;Quarkus &amp;amp; Camel&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div&gt;The main topic of the session was the new Apache Camel K project, but I gave a good extended coverage of what's coming in the upcoming Apache Camel v3.&lt;/div&gt;&lt;br /&gt;For anyone curious a bit what is coming in Apache Camel v3, then you can take a look at the slides as they are in english.&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;The &lt;a href="https://www.slideshare.net/davsclaus/apache-camel-k-copenhagen-v2"&gt;slides of the talk is here&lt;/a&gt;:&lt;br /&gt;&lt;br /&gt;&lt;a href="https://www.slideshare.net/davsclaus/apache-camel-k-copenhagen-v2" style="text-align: center;"&gt;&lt;img border="0" data-original-height="346" data-original-width="474" height="233" src="https://2.bp.blogspot.com/-RVNH75hhUSY/XLBHaF2U5PI/AAAAAAAAB6E/XK3nlb1-0c4OpGkBe3R7d-dzjprbQNBCgCLcBGAs/s320/Screen%2BShot%2B2019-04-12%2Bat%2B10.07.43.png" width="320" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;... and the &lt;a href="https://www.youtube.com/watch?v=AXDahzT5Zck"&gt;video is online at youtube (danish)&lt;/a&gt;:&lt;br /&gt;&lt;br /&gt;&lt;iframe allowfullscreen="" class="YOUTUBE-iframe-video" data-thumbnail-src="https://i.ytimg.com/vi/AXDahzT5Zck/0.jpg" frameborder="0" height="266" src="https://www.youtube.com/embed/AXDahzT5Zck?feature=player_embedded" width="320"&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=DnC_LR0glQU:U-kswj6-5kw:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=DnC_LR0glQU:U-kswj6-5kw:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=DnC_LR0glQU:U-kswj6-5kw:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=DnC_LR0glQU:U-kswj6-5kw:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=DnC_LR0glQU:U-kswj6-5kw:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=DnC_LR0glQU:U-kswj6-5kw:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=DnC_LR0glQU:U-kswj6-5kw:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/DnC_LR0glQU" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/64amRTLKpeo" height="1" width="1" alt=""/&gt;</content><summary>A couple of days ago I was back in Copenhagen, at the capital region IT division for health care, where my Apache Camel journey started in 2008. So it was great being back at that magical place ;) The event was hosted by Javagruppen and they had video equipment so they streamed the event live on youtube. The agenda of my 2 hour session was: What is Apache Camel? Apache Camel v3 Apache Camel K Knat...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2019-04-12T08:14:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/DnC_LR0glQU/long-2h-apache-camel-video-sorry-its-in.html</feedburner:origLink></entry><entry><title>Migrating Java applications to Quarkus: Lessons learned</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Cp29xpAF3a4/" /><category term="Community" /><category term="Java" /><category term="Quarkus" /><author><name>Filippe Spolti</name></author><id>https://developers.redhat.com/blog/?p=579287</id><updated>2019-04-12T07:03:41Z</updated><published>2019-04-12T07:03:41Z</published><content type="html">&lt;p&gt;Migrating applications from a well-grounded framework to a completely new framework just a few days after its public release sounds crazy, right? Before doing so, I asked myself several questions, such as: Why should I do that? Is this new framework stable? What would be the gain? To me, the most important of these is: Why?&lt;/p&gt; &lt;p&gt;To help answer that question, I started thinking about my application&amp;#8217;s performance—in this case, the bootstrap time—and asked myself whether I was happy with the actual time my application took to start up. The answer was no. And, nowadays, this is one of the most important metrics to be considered when working with microservices, mainly on a serverless architecture.&lt;/p&gt; &lt;p&gt;The goal of this article is to provide a point of reference for a basic migration of an existing Java EE application to &lt;a href="https://developers.redhat.com/blog/tag/quarkus/"&gt;Quarkus&lt;/a&gt;. For this reason, I&amp;#8217;ll save a few lines of the article by not &lt;a href="https://developers.redhat.com/blog/2019/03/20/quarkus-0-12-0-released/"&gt;introducing Quarkus&lt;/a&gt; and focus mostly on the migration part. If you don&amp;#8217;t know what Quarkus is, then I recommend reading this article and visiting the &lt;a href="https://quarkus.io"&gt;Quarkus homepage&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In this article, I&amp;#8217;ll try to illustrate all the changes, or at least the most important changes, that I had to do on my existing application to make it run well with Quarkus.&lt;span id="more-579287"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;A little background&lt;/h2&gt; &lt;p&gt;The app used is a&lt;a href="https://github.com/rebase-it/rebot"&gt; Telegram API + Bot&lt;/a&gt; with several plugins that I&amp;#8217;ve been using as a playground where I can try new things, frameworks, etc. When this app was created, we decided to create a Telegram Java EE API so we could run it in any application server or framework that implements all the EE 7 Standards. The main reason was the ability to use cool stuff like CDI, JPA, and Rest. It was designed for WildFly Swarm, which is now called&lt;a href="https://thorntail.io/"&gt; Thorntail&lt;/a&gt;. Since then there have been no framework changes. Once Quarkus was released, I decided to take a further look at it, and the first impressions were amazing. It supports all the dependencies that I had initially, and most importantly, the ability to create native container images with GraalVM. So, I thought, why not give it a try?&lt;/p&gt; &lt;p&gt;Of course, a migration like this is not easy.&lt;/p&gt; &lt;h2&gt;First steps&lt;/h2&gt; &lt;p&gt;When I started to migrate the application, I divided the work into smaller sections, such as:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Dependencies&lt;/li&gt; &lt;li&gt;Divide and conquer (migrate modules, one by one)&lt;/li&gt; &lt;li&gt;Code changes&lt;/li&gt; &lt;li&gt;Dependencies review&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Dependencies&lt;/h2&gt; &lt;p&gt;As you can imagine, the first thing I did was completely remove Thorntail dependencies—in my case, the BOM from parent pom and the related dependencies from every module. I changed this:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.thorntail&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;bom&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${version.io.thorntail}&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;import&amp;#60;/scope&amp;#62; &amp;#60;type&amp;#62;pom&amp;#60;/type&amp;#62; &amp;#60;/dependency&amp;#62;&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;to:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.quarkus&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;quarkus-bom&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${io.quarkus.version}&amp;#60;/version&amp;#62; &amp;#60;type&amp;#62;pom&amp;#60;/type&amp;#62; &amp;#60;scope&amp;#62;import&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62;&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;Next, I also had to remove the &lt;b&gt;javaee-api&lt;/b&gt; dependency, which is mostly used for CDI purposes, and replace it with the &lt;b&gt;quarkus-arc&lt;/b&gt;, one of the core libraries which provides dependency injection. So, I removed it from the parent pom and did a big replace on every &lt;i&gt;pom.xml:&lt;/i&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &lt;span style="color: red;"&gt;- &amp;#60;groupId&amp;#62;javax&amp;#60;/groupId&amp;#62;&lt;/span&gt; &lt;span style="color: red;"&gt;- &amp;#60;artifactId&amp;#62;javaee-api&amp;#60;/artifactId&amp;#62;&lt;/span&gt; &lt;span style="color: green;"&gt;+ &amp;#60;groupId&amp;#62;io.quarkus&amp;#60;/groupId&amp;#62;&lt;/span&gt; &lt;span style="color: green;"&gt;+ &amp;#60;artifactId&amp;#62;quarkus-arc&amp;#60;/artifactId&amp;#62;&lt;/span&gt; &lt;span style="color: green;"&gt;+ &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62;&lt;/span&gt; &amp;#60;/dependency&amp;#62;&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;Below you can find a few more dependencies that I had to change:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;io.thorntail:jaxrs -&amp;#62; io.quarkus:quarkus-resteasy&lt;/li&gt; &lt;li&gt;io.thorntail:jpa -&amp;#62; io.quarkus:quarkus-hibernate-orm&lt;/li&gt; &lt;li&gt;data validation -&amp;#62; io.quarkus:quarkus-hibernate-validator.&lt;/li&gt; &lt;li&gt;com.h2database -&amp;#62; io.quarkus:quarkus-jdbc-h2 (Quarkus already has some jdbc extensions, H2, MariaDB, and PostgreSQL; for Oracle, there is a good starting point&lt;a href="https://groups.google.com/forum/#!search/quarkus-dev$20jdbc/quarkus-dev/ewQt9npczxw/SUCMNNBTCAAJ"&gt; here&lt;/a&gt;).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;On the project hierarchy, &lt;a href="https://github.com/rebase-it/rebot/tree/master/rebot-telegram"&gt;this&lt;/a&gt; is the module that produces the runnable jar, and it is here that we need to take out the &lt;a href="https://github.com/rebase-it/rebot/blob/0.x/rebot-telegram/pom.xml#L144-L161"&gt; Thorntail maven plugin&lt;/a&gt; and put in the &lt;a href="https://github.com/spolti/rebot/blob/quarkus/rebot-telegram/pom.xml#L141-L168"&gt;Quarkus maven plugin&lt;/a&gt;. This is a very important step; without it, you will not be able to use Quarkus.&lt;/p&gt; &lt;p&gt;Note that when working with a multi-module project, you need to pay attention to the Quarkus dependencies. For example, if some of your modules expose a Rest endpoint, you&amp;#8217;ll need to use the &lt;b&gt;quarkus-resteasy&lt;/b&gt; extension. But, note that, in order to enable this extension, this dependency also needs to be declared on the runnable module.&lt;/p&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.quarkus&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;quarkus-resteasy&amp;#60;/artifactId&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;To make sure the extensions were installed as expected, you can always verify the logs. Quarkus lets you know which extensions were installed, and a similar line is printed when the app is ready:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;em&gt;INFO [io.quarkus] Installed features: [agroal, cdi, hibernate-orm, jdbc-h2, narayana-jta, resteasy, scheduler]&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;Now is the time when the fun really begins, with a lot of issues, missing dependencies, etc. The first time that the &lt;b&gt;mvn compile quarkus:dev&lt;/b&gt; or &lt;b&gt;mvn clean package&lt;/b&gt; is executed, don&amp;#8217;t panic; a lot of issues will happen, and remember, divide and conquer!&lt;/p&gt; &lt;h2&gt;Code changes&lt;/h2&gt; &lt;p&gt;At first, I confess I got a little bit scared, so that was the right time to take a breath, get a cup of coffee, and get things done!&lt;/p&gt; &lt;p&gt;The approach I used to make things easier was to make the build work first on the smaller modules and then move forward to accomplish the first goal: a successful build! At this point, I removed every dependency from the main pom.xml in order to build only the CoreAPI and the runnable jar.&lt;/p&gt; &lt;p&gt;After going through the dependencies, my IDE started to complain about unsatisfied dependencies. In this case, there was an issue related to EJB annotations. As you can see &lt;a href="https://github.com/rebase-it/rebot/blob/0.x/rebot-telegram/src/main/java/it/rebase/rebot/Startup.java#L40-L41"&gt;here&lt;/a&gt;, I used the EJB annotations to execute tasks during the app startup using @Startup, @PostConstruct, and @PreDestroy annotations. A simple way to fix it would be just to remove the EJB annotations and keep using the PostConstruct and add a CDI annotation (i.e., ApplicationScoped on class level). But Quarkus provides a fancy way to control the application&amp;#8217;s lifecycle, with the Startup and Shutdown events that can be observed in &lt;a href="https://github.com/rebase-it/rebot/blob/master/rebot-telegram/src/main/java/it/rebase/rebot/Startup.java#L61-L74"&gt;this&lt;/a&gt; example. For more details about this specific functionality, please refer to the Quarkus &lt;a href="https://quarkus.io/guides/application-lifecycle-events-guide"&gt;documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;One of the easiest parts was the&lt;a href="https://github.com/spolti/rebot/tree/quarkus/rebot-telegram-api"&gt; Core API&lt;/a&gt;, along with some basic changes to configure CDI. On the previous version, I was using the Service Provider Implementation and discovering new providers through Service Provider mechanism. With Quarkus, I could completely remove the Service Provider files and replace it with the &lt;a href="https://github.com/rebase-it/rebot/blob/master/rebot-telegram-api/rebot-telegram-api/src/main/resources/META-INF/beans.xml"&gt;beans.xml&lt;/a&gt; file. In my case, all modules that use CDI had to have the beans.xml file added as well so Quarkus could properly discovery CDI beans. Once that was done, I could move forward and try to build the CoreAPI. If you face an issue, like the example below, the first place you might want to look is whether the dependencies listed in the issue have the beans.xml.&lt;/p&gt; &lt;p&gt;An interesting issue I had to fix was a CDI Circular dependency where I was injecting ClassA and ClassB, but ClassB already was Injecting ClassA. I am not sure why Thorntail was accepting it, but Quarkus is very strict.&lt;/p&gt; &lt;p&gt;At this point, I successfully built the CoreAPI; it requires some &lt;a href="https://github.com/rebase-it/rebot/blob/master/rebot-telegram-api/rebot-telegram-api/src/main/java/it/rebase/rebot/telegram/api/UpdatesReceiver.java#L63"&gt;System Properties&lt;/a&gt; in order to correctly configure the application. If the required properties are not set, the app will fail to start. Previously, the API was expecting only System Properties; with Quarkus this configuration was improved by also reading the &lt;a href="https://github.com/rebase-it/rebot/blob/master/rebot-telegram/src/main/resources/META-INF/microprofile-config.properties"&gt;&lt;em&gt;microprofile-config.properties&lt;/em&gt;&lt;/a&gt;. Once the configuration of the app properties was done, I moved on to the plugins.&lt;/p&gt; &lt;p&gt;The first plugins I moved to Quarkus were the simplest ones that do not require Persistence or the Cache layer, for example, &lt;a href="https://github.com/rebase-it/rebot/tree/master/rebot-plugins/rebot-ping-plugin"&gt; this simple ping plugin&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Another point of attention is the use of private members; if you got a message similar to the one below, you will have to change the access modifiers. Or, if you really think that the access modifier needs to be private, you might want to use package-private instead:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;Found unrecommended usage of private members (use package-private instead) in application beans&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;Wow, at this point I already have my app running with the first plugin on Quarkus:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;INFO [it.reb.reb.Startup] (main) The application is starting&amp;#8230;&lt;br /&gt; INFO [io.quarkus] (main) Quarkus 0.11.0 started in 0.359s.&lt;br /&gt; INFO [io.quarkus] (main) Installed features: [cdi]&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;Because most of the logging stuff for my app is under the FINE log level, I would like to configure the logging to print only debug messages that belongs to my app. To achieve this, I had to add some logging configurations on the &lt;strong&gt;microprofile-config.properties&lt;/strong&gt;, just like the example below:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;# DEBUG console logging quarkus.log.console.enable=true quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c] %s%e%n quarkus.log.console.level=TRACE # TRACE file logging quarkus.log.file.enable=true quarkus.log.file.path=/tmp/quarkus.log quarkus.log.file.level=TRACE quarkus.log.file.format=%d{HH:mm:ss} %-5p [%c{2.}]] (%t) %s%e%n # custom loggers quarkus.log.category."it.rebase".level=TRACE&lt;/pre&gt; &lt;/blockquote&gt; &lt;h3&gt;Scheduler&lt;/h3&gt; &lt;p&gt;One of the plugins I was using was the EJB timer. In order to take advantage of everything that Quarkus provides, however, I replaced the EJB timer with the &lt;b&gt;quarkus-scheduler&lt;/b&gt; extension (Quartz under the hood), which also works with Annotations. And, to be honest, its usage is very simple, that is:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&lt;span class="pl-k"&gt;@Scheduled&lt;/span&gt;(&lt;span class="pl-c1"&gt;every&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1800s&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;delay&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;30&lt;/span&gt;)&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;And its dependency:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.quarkus&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;quarkus-scheduler&amp;#60;/artifactId&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62;&lt;/pre&gt; &lt;/blockquote&gt; &lt;h3&gt;Infinispan cache&lt;/h3&gt; &lt;p&gt;My app was using the Infinispan embedded cache where I was using specific Qualifiers and Producers to configure a different cache for different purposes and where I could just inject a specific cache according to my plugin needs. When I built the cache module, I got the following issue:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;[error]: Build step io.quarkus.arc.deployment.ArcAnnotationProcessor#build threw an exception: javax.enterprise.inject.spi.DefinitionException: Interceptor has no bindings: org.infinispan.jcache.annotation.CachePutInterceptor&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;This was fixed by updating the Infinispan dependencies:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Bump version from 9.1.1.Final to 9.4.9.Final&lt;/li&gt; &lt;li&gt;Update dependency from org.infinispan:infinispan-embedded to org.infinispan:infinispan-cdi-embedded&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;From this point, I got some CDI issues, like:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Unsatisfied dependency for type org.infinispan.manager.EmbeddedCacheManager#defaultCacheContainer&lt;/li&gt; &lt;li&gt;Unsatisfied dependency for type org.infinispan.cdi.embedded.InfinispanExtensionEmbedded#infinispanExtension&lt;/li&gt; &lt;li&gt;Unsatisfied dependency for type org.infinispan.Cache&amp;#60;java.lang.String, java.lang.String&amp;#62; and qualifiers [@Default]&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Basically, the issue is telling us that there are no Producers for the methods above. To fix that, I had to manually create producers to satisfy the missing dependencies; to start I modified the default cache by removing the old cache configuration that looks like:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;@Produces @ConfigureCache("default-cache") @DefaultCache public Configuration specialCacheCfg(InjectionPoint injectionPoint) { ... }&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;And added the new cache configuration:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;private DefaultCacheManager defaultCacheManager; @Produces @DefaultCache public Cache&amp;#60;String, String&amp;#62; returnDefaultCacheStringObject() { return defaultCacheContainer().getCache(); } @Produces public Configuration defaultCacheProducer() { log.info("Configuring default-cache..."); return new ConfigurationBuilder() .indexing() .autoConfig(true) .memory() .size(1000) .build(); } @Produces public EmbeddedCacheManager defaultCacheContainer() { if (null == defaultCacheManager) { GlobalConfiguration g = new GlobalConfigurationBuilder() .nonClusteredDefault() .defaultCacheName("default-cache") .globalJmxStatistics() .allowDuplicateDomains(false) .build(); defaultCacheManager = new DefaultCacheManager(g, defaultCacheProducer()); } return defaultCacheManager; } @Produces public InfinispanExtensionEmbedded defaultInfinispanExtensionEmbedded() { return new InfinispanExtensionEmbedded(); }&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;Another point I had to update was the &lt;a href="http://infinispan.org/docs/stable/user_guide/user_guide.html#listeners_and_notifications"&gt;Event Listeners.&lt;/a&gt; Here is an example before the changes:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;@Listener public class KarmaEventListener { ... @CacheEntryCreated public void entryCreated(@Observes CacheEntryCreatedEvent event) { ... } }&lt;/pre&gt; &lt;/blockquote&gt; &lt;h3&gt;Persistence Module&lt;/h3&gt; &lt;p&gt;Besides the dependency changes described previously on Thorntail, to use the database, you would have to create a file called &lt;b&gt;project-defaults.yaml&lt;/b&gt; under &lt;b&gt;resources/&lt;/b&gt; path and declare the database information there in addition to the persistence.xml file. With Quarkus, this can be done by providing a file called &lt;b&gt;application.properties&lt;/b&gt; on the same path, as described &lt;a href="https://quarkus.io/guides/hibernate-orm-guide"&gt;here&lt;/a&gt;. Or, you can provide all the database settings using System Properties through the command line when running the binary. So, the two old files were replaced by the application.properties; here is an example:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;quarkus.datasource.url=jdbc:h2:file:/opt/h2/database.db;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE quarkus.datasource.driver=org.h2.Driver quarkus.datasource.username=rebot quarkus.datasource.password=rebot quarkus.datasource.max-size=8 quarkus.datasource.min-size=2 quarkus.hibernate-orm.database.generation=update quarkus.hibernate-orm.log.sql=false&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;Another little change was a tweak on the EntityManager Injection that had to be changed from:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;@PersistenceContext(unitName = "rebotPU") private EntityManager em;&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;to&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;@Inject EntityManager em;&lt;/pre&gt; &lt;/blockquote&gt; &lt;h2&gt;Dependencies review&lt;/h2&gt; &lt;p&gt;I completely removed resteasy dependencies and used quarkus-resteasy instead. After removing the resteasy, a new issue started to happen:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;Caused by: java.lang.ClassNotFoundException: org.glassfish.jersey.client.JerseyClientBuilder&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;To solve this, three new dependencies had to be added on the modules that were using the &lt;strong&gt;javax.ws.rs.client.ClientBuilder&lt;/strong&gt;. The new dependencies are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;org.glassfish.jersey.core:jersey-client&lt;/li&gt; &lt;li&gt;org.glassfish.jersey.inject:jersey-hk2&lt;/li&gt; &lt;li&gt;org.glassfish.jersey.media:jersey-media-json-jackson&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;It would definitely be worthwhile to investigate this further or drop the ClientBuilder usage.&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;WARN: RESTEASY002145: NoClassDefFoundError: Unable to load builtin provider org.jboss.resteasy.plugins.providers.DataSourceProvider from jar:file:/home/spolti/.m2/repository/org/jboss/resteasy/resteasy-core/4.0.0.Beta8/resteasy-core-4.0.0.Beta8.jar!/META-INF/services/javax.ws.rs.ext.Providers&lt;br /&gt; java.lang.NoClassDefFoundError: javax/activation/DataSource&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;This situation was fixed by adding the &lt;strong&gt;quarkus-hibernate-orm&lt;/strong&gt; on the module that failed with this issue.&lt;/p&gt; &lt;p&gt;I think I&amp;#8217;ve covered the most important points that came up during my experience while migrating my app to Quarkus. This was the first step; unfortunately, I was not able to build the native binary because the Infinispan embedded cache dependency is not ready for it yet. Definitely, one of the next steps would be to look for an alternative for it, which will be a topic for a new article.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Fmigrating-java-applications-to-quarkus-lessons-learned%2F&amp;#38;linkname=Migrating%20Java%20applications%20to%20Quarkus%3A%20Lessons%20learned" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Fmigrating-java-applications-to-quarkus-lessons-learned%2F&amp;#38;linkname=Migrating%20Java%20applications%20to%20Quarkus%3A%20Lessons%20learned" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Fmigrating-java-applications-to-quarkus-lessons-learned%2F&amp;#38;linkname=Migrating%20Java%20applications%20to%20Quarkus%3A%20Lessons%20learned" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Fmigrating-java-applications-to-quarkus-lessons-learned%2F&amp;#38;linkname=Migrating%20Java%20applications%20to%20Quarkus%3A%20Lessons%20learned" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Fmigrating-java-applications-to-quarkus-lessons-learned%2F&amp;#38;linkname=Migrating%20Java%20applications%20to%20Quarkus%3A%20Lessons%20learned" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Fmigrating-java-applications-to-quarkus-lessons-learned%2F&amp;#38;linkname=Migrating%20Java%20applications%20to%20Quarkus%3A%20Lessons%20learned" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Fmigrating-java-applications-to-quarkus-lessons-learned%2F&amp;#38;linkname=Migrating%20Java%20applications%20to%20Quarkus%3A%20Lessons%20learned" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Fmigrating-java-applications-to-quarkus-lessons-learned%2F&amp;#38;linkname=Migrating%20Java%20applications%20to%20Quarkus%3A%20Lessons%20learned" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Fmigrating-java-applications-to-quarkus-lessons-learned%2F&amp;#038;title=Migrating%20Java%20applications%20to%20Quarkus%3A%20Lessons%20learned" data-a2a-url="https://developers.redhat.com/blog/2019/04/12/migrating-java-applications-to-quarkus-lessons-learned/" data-a2a-title="Migrating Java applications to Quarkus: Lessons learned"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/04/12/migrating-java-applications-to-quarkus-lessons-learned/"&gt;Migrating Java applications to Quarkus: Lessons learned&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Cp29xpAF3a4" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Migrating applications from a well-grounded framework to a completely new framework just a few days after its public release sounds crazy, right? Before doing so, I asked myself several questions, such as: Why should I do that? Is this new framework stable? What would be the gain? To me, the most important of these is: [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/04/12/migrating-java-applications-to-quarkus-lessons-learned/"&gt;Migrating Java applications to Quarkus: Lessons learned&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/04/12/migrating-java-applications-to-quarkus-lessons-learned/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">579287</post-id><dc:creator>Filippe Spolti</dc:creator><dc:date>2019-04-12T07:03:41Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/04/12/migrating-java-applications-to-quarkus-lessons-learned/</feedburner:origLink></entry><entry><title>Understanding when not to std::move in C++</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/dO4_jJvIcO0/" /><category term="C++" /><category term="Programming Languages" /><category term="c++" /><category term="developer" /><category term="gcc" /><author><name>Marek Polacek</name></author><id>https://developers.redhat.com/blog/?p=583077</id><updated>2019-04-12T07:00:29Z</updated><published>2019-04-12T07:00:29Z</published><content type="html">&lt;p&gt;One of the most important concepts introduced in C++11 was &lt;em&gt;&lt;a href="https://en.cppreference.com/w/cpp/language/move_constructor"&gt;move semantics&lt;/a&gt;. &lt;/em&gt;Move semantics is a way to avoid expensive deep copy operations and replace them with cheaper move operations. Essentially, you can think of it as turning a deep copy into a shallow copy.&lt;/p&gt; &lt;p&gt;Move semantics came along with several more or less related features, such as &lt;a href="https://en.cppreference.com/w/cpp/language/reference#Rvalue_references"&gt;&lt;em&gt;rvalue references&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://en.cppreference.com/w/cpp/language/value_category"&gt;&lt;em&gt;xvalues&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://en.cppreference.com/w/cpp/language/reference#Forwarding_references"&gt;&lt;em&gt;forwarding  references&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://en.cppreference.com/w/cpp/utility/forward"&gt;&lt;em&gt;perfect forwarding&lt;/em&gt;&lt;/a&gt;, and so on. The standard C++ library gained a function template called &lt;code&gt;std::move&lt;/code&gt;, which, despite its name, does not move anything. &lt;code&gt;std::move&lt;/code&gt; merely casts its argument to an rvalue reference to allow moving it, but doesn&amp;#8217;t guarantee a move operation. For example, we can write a more effective version of &lt;code&gt;swap&lt;/code&gt; using &lt;code&gt;std::move&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;template&amp;#60;typename T&amp;#62; void swap(T&amp;#38; a, T&amp;#38; b) { T t(std::move (a)); a = std::move (b); b = std::move (t); }&lt;/pre&gt; &lt;p&gt;This version of swap consists of one move construction and two move assignments and does not involve any deep copies. All is well. However, &lt;code&gt;std::move&lt;/code&gt; must be used judiciously; using it blithely may lead to performance degradation, or simply be redundant, affecting readability of the code. Fortunately, the compiler can sometimes help with finding such wrong uses of &lt;code&gt;std::move&lt;/code&gt;. In this article, I will introduce two new warnings I&amp;#8217;ve implemented for GCC 9 that deal with incorrect usage of &lt;code&gt;std::move&lt;/code&gt;.&lt;span id="more-583077"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;-Wpessimizing-move&lt;/h3&gt; &lt;p&gt;When returning a local variable of the same class type as the function return type, the compiler is free to omit any copying or moving (i.e., perform &lt;a href="https://en.cppreference.com/w/cpp/language/copy_elision"&gt;&lt;em&gt;copy/move elision&lt;/em&gt;&lt;/a&gt;), if the variable we are returning is a non-volatile automatic object and is not a function parameter. In such a case, the compiler can construct the object directly in its final destination (i.e., in the caller&amp;#8217;s stack frame). The compiler is free to perform this optimization even when the move/copy construction has side effects. Additionally, C++17 says that copy elision is mandatory in certain situations. This is what we call &lt;em&gt;Named Return Value Optimization&lt;/em&gt; (NRVO). (Note that this optimization does not depend on any of the &lt;code&gt;-O&lt;/code&gt; levels.) For instance:&lt;/p&gt; &lt;pre&gt;struct T { // ... }; T fn() { T t; return t; } T t = fn ();&lt;/pre&gt; &lt;p&gt;The object a function returns doesn&amp;#8217;t need to have a name. For example, the return statement in the function &lt;code&gt;fn&lt;/code&gt; above might be &lt;code&gt;return T();&lt;/code&gt; and copy elision would still apply. In this case, this optimization is simply &lt;em&gt;Return Value Optimization&lt;/em&gt; (RVO).&lt;/p&gt; &lt;p&gt;Some programmers might be tempted to &amp;#8220;optimize&amp;#8221; the code by putting &lt;code&gt;std::move&lt;/code&gt; into the return statement like this:&lt;/p&gt; &lt;pre&gt;T fn() { T t; return std::move (t); }&lt;/pre&gt; &lt;p&gt;However, here the call to &lt;code&gt;std::move&lt;/code&gt; precludes the NRVO, because it breaks the conditions specified in the C++ standard, namely &lt;a href="http://eel.is/c++draft/class.copy.elision"&gt;&lt;em&gt;[class.copy.elision]&lt;/em&gt;&lt;/a&gt;: the returned expression must be a name. The reason for this is that &lt;code&gt;std::move&lt;/code&gt; returns a reference, and in general, the compiler can&amp;#8217;t know to what object the function returns a reference to. So GCC 9 will issue a warning (when &lt;code&gt;-Wall&lt;/code&gt; is in effect):&lt;/p&gt; &lt;pre&gt;t.C:8:20: warning: moving a local object in a return statement prevents copy elision [-Wpessimizing-move] 8 | return std::move (t); | ~~~~~~~~~~^~~ t.C:8:20: note: remove ‘std::move’ call&lt;/pre&gt; &lt;h3&gt;-Wredundant-move&lt;/h3&gt; &lt;p&gt;When the class object that a function returns is a function parameter, copy elision is not possible. However, when all the other conditions for the RVO are satisfied, C++ (as per the resolution of &lt;a href="https://wg21.link/cwg1148"&gt;Core Issue 1148&lt;/a&gt;) says that a move operation should be used: overload resolution is performed as if the object were an rvalue (this is known as &lt;em&gt;two-stage overload resolution&lt;/em&gt;). The parameter is an lvalue (because it has a name), but it&amp;#8217;s about to be destroyed. Thus, the compiler ought to treat is as an rvalue.&lt;/p&gt; &lt;p&gt;For instance:&lt;/p&gt; &lt;pre&gt;struct T { T(const T&amp;#38;) = delete; T(T&amp;#38;&amp;#38;); }; T fn(T t) { return t; // move used implicitly }&lt;/pre&gt; &lt;p&gt;Explicitly using &lt;code&gt;return std::move (t);&lt;/code&gt; here would not be pessimizing—a move would be used in any case—it is merely redundant. The compiler can now point that out using the new warning &lt;code&gt;-Wredundant-move&lt;/code&gt;, enabled by &lt;code&gt;-Wextra&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;r.C:8:21: warning: redundant move in return statement [-Wredundant-move] 8 | return std::move(t); // move used implicitly | ~~~~~~~~~^~~ r.C:8:21: note: remove ‘std::move’ call&lt;/pre&gt; &lt;p&gt;Because the GNU C++ compiler implements &lt;a href="http://wg21.link/cwg1579"&gt;Core Issue 1579&lt;/a&gt;, the following call to &lt;code&gt;std::move&lt;/code&gt; is also redundant:&lt;/p&gt; &lt;pre&gt;struct U { }; struct T { operator U(); }; U f() { T t; return std::move (t); } &lt;/pre&gt; &lt;p&gt;Copy elision isn&amp;#8217;t possible here because the types &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; don&amp;#8217;t match. But, the rules for the implicit rvalue treatment are less strict than the rules for the RVO, and the call to &lt;code&gt;std::move&lt;/code&gt; is not necessary.&lt;/p&gt; &lt;p&gt;There are situations where returning &lt;code&gt;std::move (expr)&lt;/code&gt; makes sense, however. The rules for the implicit move require that the selected constructor take an rvalue reference to the returned object&amp;#8217;s type. Sometimes that isn&amp;#8217;t the case. For example, when a function returns an object whose type is a class derived from the class type the function returns. In that case, overload resolution is performed a second time, this time treating the object as an lvalue:&lt;/p&gt; &lt;pre&gt;struct U { }; struct T : U { }; U f() { T t; return std::move (t); } &lt;/pre&gt; &lt;p&gt;While in general &lt;code&gt;std::move&lt;/code&gt; is a great addition to the language, it&amp;#8217;s not always appropriate to use it, and, sadly, the rules are fairly complicated. Fortunately, the compiler is able to recognize the contexts where a call to &lt;code&gt;std::move&lt;/code&gt; would either prevent elision of a move or a copy—or would actually not make a difference—and warns appropriately. Therefore, we recommend enabling these warnings and perhaps adjusting the code base. The reward may be a minor performance gain and cleaner code. GCC 9 will be part of &lt;a href="https://fedoraproject.org/wiki/Releases/30/Schedule"&gt;Fedora 30&lt;/a&gt;, but you can try it right now on &lt;a href="https://gcc.godbolt.org/"&gt;Godbolt&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Funderstanding-when-not-to-stdmove-in-c%2F&amp;#38;linkname=Understanding%20when%20not%20to%20std%3A%3Amove%20in%20C%2B%2B" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Funderstanding-when-not-to-stdmove-in-c%2F&amp;#38;linkname=Understanding%20when%20not%20to%20std%3A%3Amove%20in%20C%2B%2B" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Funderstanding-when-not-to-stdmove-in-c%2F&amp;#38;linkname=Understanding%20when%20not%20to%20std%3A%3Amove%20in%20C%2B%2B" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Funderstanding-when-not-to-stdmove-in-c%2F&amp;#38;linkname=Understanding%20when%20not%20to%20std%3A%3Amove%20in%20C%2B%2B" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Funderstanding-when-not-to-stdmove-in-c%2F&amp;#38;linkname=Understanding%20when%20not%20to%20std%3A%3Amove%20in%20C%2B%2B" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Funderstanding-when-not-to-stdmove-in-c%2F&amp;#38;linkname=Understanding%20when%20not%20to%20std%3A%3Amove%20in%20C%2B%2B" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Funderstanding-when-not-to-stdmove-in-c%2F&amp;#38;linkname=Understanding%20when%20not%20to%20std%3A%3Amove%20in%20C%2B%2B" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Funderstanding-when-not-to-stdmove-in-c%2F&amp;#38;linkname=Understanding%20when%20not%20to%20std%3A%3Amove%20in%20C%2B%2B" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F12%2Funderstanding-when-not-to-stdmove-in-c%2F&amp;#038;title=Understanding%20when%20not%20to%20std%3A%3Amove%20in%20C%2B%2B" data-a2a-url="https://developers.redhat.com/blog/2019/04/12/understanding-when-not-to-stdmove-in-c/" data-a2a-title="Understanding when not to std::move in C++"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/04/12/understanding-when-not-to-stdmove-in-c/"&gt;Understanding when not to std::move in C++&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/dO4_jJvIcO0" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;One of the most important concepts introduced in C++11 was move semantics. Move semantics is a way to avoid expensive deep copy operations and replace them with cheaper move operations. Essentially, you can think of it as turning a deep copy into a shallow copy. Move semantics came along with several more or less related [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/04/12/understanding-when-not-to-stdmove-in-c/"&gt;Understanding when not to std::move in C++&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/04/12/understanding-when-not-to-stdmove-in-c/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">583077</post-id><dc:creator>Marek Polacek</dc:creator><dc:date>2019-04-12T07:00:29Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/04/12/understanding-when-not-to-stdmove-in-c/</feedburner:origLink></entry><entry><title>bpmNEXT 2019 and Red Hat Summit 2019</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/nWdWQNRi_kk/bpmnext-2019-and-red-hat-summit-2019.html" /><category term="bpmNEXT" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="feed_group_name_jbpm" scheme="searchisko:content:tags" /><category term="feed_name_kverlaen" scheme="searchisko:content:tags" /><category term="Presentation" scheme="searchisko:content:tags" /><category term="summit" scheme="searchisko:content:tags" /><author><name>Kris Verlaenen</name></author><id>searchisko:content:id:jbossorg_blog-bpmnext_2019_and_red_hat_summit_2019</id><updated>2019-04-11T14:14:05Z</updated><published>2019-04-11T14:14:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: justify;"&gt;In the next few months, I will have the opportunity to present at both bpmNEXT and Red Hat Summit.&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: center;"&gt;&lt;img alt="bpmNEXT" src="https://bpmnext.com/wp-content/uploads/2012/05/bpmNEXT_logo.png" /&gt; &lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;Next week (April 15 - 17), &lt;a href="https://bpmnext.com/"&gt;bpmNEXT&lt;/a&gt; is taking place again in Santa Barbara, where lots of vendors in the BPM space (or whatever you prefer calling it nowadays - business automation, workflow, orchestration) are coming to showcase and discuss some of their latest achievements.&amp;nbsp; Check out the &lt;a href="https://bpmnext.com/bpmnext-2019/conference-agenda-2019/"&gt;conference agenda&lt;/a&gt; for the full schedule.&amp;nbsp; I will be presenting on Wednesday on:&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;blockquote class="tr_bq"&gt;&lt;strong&gt;Automating Human-Centric Processes with Machine Learning&lt;/strong&gt;&lt;br /&gt;&lt;em&gt;Kris Verlaenen, Red Hat&lt;/em&gt; &lt;/blockquote&gt;&lt;blockquote class="tr_bq"&gt;Many business processes involve human actors to perform some of the steps that are required to achieve the business goal.&amp;nbsp; In this context, human actors are typically expensive, can cause unwanted delay or become a bottleneck.&amp;nbsp; Automating some of these tasks can have a tremendous return on investment, and Machine Learning brings the missing bits to seamlessly automate work initially assigned to humans as soon as there is enough confidence in the expected outputs.&amp;nbsp; By integrating Machine Learning into our Red Hat Business Automation portfolio, customers can gradually start using Machine Learning to assist or gradually even replace the human actor(s) in a very simple manner, without even having to make any changes to the process definitions in their organisation.&lt;/blockquote&gt;Last year, the recordings were available almost immediately, so that should give everyone an opportunity to take advantage of the great presentations that are typically shown there.&amp;nbsp; I will also blog my impressions during the event as last years.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-gHE4guGjkW0/WQH3f6ypvJI/AAAAAAAAC8Q/UQbsa6d1gWcsFKHEXnqj_gKPBTKyV4VNgCLcB/s1600/summit_logo_170_0.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://2.bp.blogspot.com/-gHE4guGjkW0/WQH3f6ypvJI/AAAAAAAAC8Q/UQbsa6d1gWcsFKHEXnqj_gKPBTKyV4VNgCLcB/s1600/summit_logo_170_0.png" /&gt;&lt;/a&gt;&amp;nbsp;&lt;/div&gt;&lt;br /&gt;I will also attend Red Hat Summit this year, which is taking place in Boston on May 7-9.&amp;nbsp; I have a minitheater session where I will be talking about all the work we have been doing for our next generation architecture for cloud-native business automation.&amp;nbsp; We got a lot of exciting things we've been working on, so I'm really excited we'll be able to share this information with everyone soon.&lt;br /&gt;&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;&lt;b&gt;Automating business operations in a hybrid cloud world&lt;/b&gt;&lt;br /&gt;&lt;i&gt;Kris Verlaenen, Red Hat&lt;/i&gt; &lt;/blockquote&gt;&lt;blockquote class="tr_bq"&gt;Business automation helps you automate the many processes and decisions in your applications. In the context of a hybrid cloud, we have been working on our next generation architecture to support process automation and decision management in a true cloud-native manner, taking full advantage of the cloud infrastructure and many of the recent technical advances in that context.&amp;nbsp; We will demonstrate how business automation simplifies building your own domain-specific applications, leveraging extremely small and efficient execution yet still taking advantage of a lot of the capabilities business automation could offer you as well (from managing human interaction, auditing to monitoring and admin operations).&lt;/blockquote&gt;If you are attending, feel free to reach out if you want to meet up!&amp;nbsp; But we'll share the same information with the wider community as well of course, so stay tuned !&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/nWdWQNRi_kk" height="1" width="1" alt=""/&gt;</content><summary>In the next few months, I will have the opportunity to present at both bpmNEXT and Red Hat Summit. Next week (April 15 - 17), bpmNEXT is taking place again in Santa Barbara, where lots of vendors in the BPM space (or whatever you prefer calling it nowadays - business automation, workflow, orchestration) are coming to showcase and discuss some of their latest achievements.  Check out the conference...</summary><dc:creator>Kris Verlaenen</dc:creator><dc:date>2019-04-11T14:14:00Z</dc:date><feedburner:origLink>http://kverlaen.blogspot.com/2019/04/bpmnext-2019-and-red-hat-summit-2019.html</feedburner:origLink></entry><entry><title>Short Apache Camel K video</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/5GzzyRwhPAM/quick-apache-camel-k-video.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="camelk" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="Knative" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="video" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-short_apache_camel_k_video</id><updated>2019-04-11T10:27:24Z</updated><published>2019-04-11T10:26:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;You may have seen the work we are doing in the Apache Camel community around &lt;a href="https://github.com/apache/camel-k"&gt;Camel K&lt;/a&gt;.&lt;br /&gt;&lt;a href="https://www.nicolaferraro.me/2018/10/15/introducing-camel-k/"&gt;Nicola introduced Camel K&lt;/a&gt; on his blog a half year ago, with the words&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;Just few months ago, we were discussing about a new project that we could start as part of Apache Camel. A project with the potential to change the way people deal with integration. That project is now here and it’s called “Apache Camel K”.&lt;/blockquote&gt;The Apache Camel K is in active development and its progressing nicely. Yesterday I gave a talk at the KMD Steam conference in Copenhagen, Denmark about &lt;a href="https://www.slideshare.net/davsclaus/serverless-integration-with-knative-and-apache-camel-on-kubernetes"&gt;Serverless Integration with Knative and Camel K on Kubernetes&lt;/a&gt;. As the talk was only 30 minutes I decided not to do any live demos and quickly recorded a 45 second short video of a quick Camel K demo.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;iframe allowfullscreen="" class="YOUTUBE-iframe-video" data-thumbnail-src="https://i.ytimg.com/vi/DQK83Cq--W0/0.jpg" frameborder="0" height="266" src="https://www.youtube.com/embed/DQK83Cq--W0?feature=player_embedded" width="320"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br /&gt;In the top left corner you have a Camel route in a single Sample.java source file. On the top right corner we have an openshift web console, as I am running a local minishift cluster (Camel K also runs nicely on vanilla Kubernetes, but their web console is not as great as the one from openshift).&lt;br /&gt;In the bottom we have the terminal where I run the Camel K integration with the Camel K CLI tool and the output of the integration is logged in the console. Notice how quickly the rolling upgrade is when I edit and save the Java source code.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=vSuP18V45Bc:qaN31t_bxAA:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=vSuP18V45Bc:qaN31t_bxAA:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=vSuP18V45Bc:qaN31t_bxAA:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=vSuP18V45Bc:qaN31t_bxAA:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=vSuP18V45Bc:qaN31t_bxAA:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=vSuP18V45Bc:qaN31t_bxAA:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=vSuP18V45Bc:qaN31t_bxAA:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/vSuP18V45Bc" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/5GzzyRwhPAM" height="1" width="1" alt=""/&gt;</content><summary>You may have seen the work we are doing in the Apache Camel community around Camel K. Nicola introduced Camel K on his blog a half year ago, with the words Just few months ago, we were discussing about a new project that we could start as part of Apache Camel. A project with the potential to change the way people deal with integration. That project is now here and it’s called “Apache Camel K”.The ...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2019-04-11T10:26:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/vSuP18V45Bc/quick-apache-camel-k-video.html</feedburner:origLink></entry><entry><title>Report from the February 2019 ISO C++ meeting (Core Language working group)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/B5NlAvE2wug/" /><category term="C++" /><category term="Community" /><category term="Programming Languages" /><category term="c++" /><author><name>Jason Merrill</name></author><id>https://developers.redhat.com/blog/?p=582757</id><updated>2019-04-11T07:00:12Z</updated><published>2019-04-11T07:00:12Z</published><content type="html">&lt;p&gt;The February 2019 &lt;a href="https://isocpp.org/std/meetings-and-participation/upcoming-meetings"&gt;ISO C++ meeting&lt;/a&gt; was held in Kailua-Kona, Hawaii. As usual, Red Hat sent three developers to the meeting: I attended in the Core Language &lt;a href="https://isocpp.org/std/the-committee"&gt;working group&lt;/a&gt;, Jonathan Wakely in Library, and Thomas Rodgers in SG1 (parallelism and concurrency). The meeting went smoothly, although there was significant uncertainty at the beginning where we would end up. In the end, Modules and Coroutines were accepted into the C++20 draft, so now we have our work cut out for us nailing down the remaining loose corners. Here ar highlights from the meeting.&lt;/p&gt; &lt;p&gt;&lt;span id="more-582757"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;&lt;a href="https://wg21.link/P1103R3"&gt;Modules&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;Work on Modules is very much continuing at this point. All of the Evolution group&amp;#8217;s Tuesday discussions, and some later in the week, were on various subtleties of Modules, particularly around argument-dependent lookup.  A Monday evening discussion also covered the tooling challenges. I haven&amp;#8217;t been following the design discussions very closely, as Nathan Sidwell is in charge of Modules in GCC, but it seems like we&amp;#8217;re converging on a solid design, with various proofs of concept to address concerns. The global module fragment still makes me nervous, but now that we have header units as well, I&amp;#8217;m satisfied that it won&amp;#8217;t be a huge problem.&lt;/p&gt; &lt;h3&gt;&lt;a href="https://wg21.link/P0912R5"&gt;Coroutines&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;Coroutines took up all of Wednesday in Evolution. In addition to the Coroutines TS and Core Coroutines proposals that have been under discussion at past meetings, a third design was presented, referred to as &amp;#8220;Symmetric Coroutines.&amp;#8221; There was a lot of comparison of the different approaches—comparing the different choices made by the different proposals and considering possibilities for future convergence between them. In the end, Evolution voted strongly to go ahead with the design in the Coroutines TS.&lt;/p&gt; &lt;h3&gt;&lt;a href="https://wg21.link/p0542r5"&gt;Contracts&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;Contracts was voted into C++20 at an earlier meeting, but the topic still took up all of Monday. There were two competing proposals to address some people&amp;#8217;s nervousness about &amp;#8220;assuming&amp;#8221; a contract condition such that it affects optimization of paths of execution that include the contract.&lt;/p&gt; &lt;p&gt;It has always seemed to me that if you have contracts that can continue, those conditions must not be assumed by subsequent code. But, if a contract check cannot continue, naturally the check can be assumed by subsequent code, because if it had been false execution would not have continued. So, the question of whether a condition can be assumed reduces to whether or not the check can continue. The two proposals both wanted to increase explicit control over this, one by adding the &amp;#8220;continue&amp;#8221; keyword to the constructor, and the other by introducing explicit semantics like check_maybe_continue to be used instead of contract levels like &amp;#8220;default.&amp;#8221; I&amp;#8217;m sure we&amp;#8217;ll see more about this at the next meeting.&lt;/p&gt; &lt;p&gt;There has also been nervousness about backward propagation of assumed conditions based on the existing wording that an unchecked contract that would have failed is undefined behavior; compilers optimize based on the assumption that undefined behavior can&amp;#8217;t happen, and mark code as unreachable accordingly. I think this worry is exaggerated, because back-propagation of undefined conditions happens in most optimizers already (e.g., with null pointer dereference) and this would just make the conditions clearer. Checked contracts wouldn&amp;#8217;t back-propagate, as the contract handler might not return.&lt;/p&gt; &lt;p&gt;One proposal was made to change &amp;#8220;expects&amp;#8221;/&amp;#8221;ensures&amp;#8221; to &amp;#8220;pre&amp;#8221;/&amp;#8221;post&amp;#8221;; this suggestion was well received and will probably go in at the next meeting.&lt;/p&gt; &lt;h3&gt;Reflection&lt;/h3&gt; &lt;p&gt;Core spent a while on &lt;a href="http://wg21.link/P1390R1"&gt;responses to national body comments&lt;/a&gt; on the &lt;a href="http://wg21.link/N4766"&gt;Reflection TS&lt;/a&gt;, and the TS as changed was approved for publication. It&amp;#8217;s unclear whether this approach to reflection (using magic types) will end up being the one that goes into the standard, but we think it&amp;#8217;s well specified at this point.&lt;/p&gt; &lt;p&gt;Here are some of the smaller papers that went in:&lt;/p&gt; &lt;p&gt;Extending structured bindings (&lt;a href="https://wg21.link/p1091r3"&gt;P1091R3&lt;/a&gt;, &lt;a href="https://wg21.link/p1381r1"&gt;P1381R1&lt;/a&gt;), which allows structured bindings to be declared static and thread_local and to be captured by lambdas.&lt;/p&gt; &lt;p&gt;&lt;a href="https://wg21.link/P0960R3"&gt;Allow initializing aggregates from a parenthesized list of values&lt;/a&gt;, so now all aggregate classes can be initialized using the normal syntax for calling a constructor, with similar semantics. For example, in a constructor call, a temporary bound to a reference member is not extended, and braces are not elided. This was requested to support usage by library object factory functions like make_unique.&lt;/p&gt; &lt;p&gt;&lt;a href="https://wg21.link/P1009R2"&gt;Array size deduction in new-expressions&lt;/a&gt;, allowing &lt;code&gt;new T[]{ ... }&lt;/code&gt; to deduce the size of the allocated array from the initializer, like we do already for variables.&lt;/p&gt; &lt;p&gt;&lt;a href="https://wg21.link/P1185R2"&gt;&amp;#60;=&amp;#62; != ==&lt;/a&gt;, which changes defaulted operator== to use member == rather than &amp;#60;=&amp;#62; for reasons of efficiency.&lt;/p&gt; &lt;p&gt;Here are some other papers we looked at, which weren&amp;#8217;t quite ready this week:&lt;/p&gt; &lt;p&gt;&lt;a href="http://wg21.link/P1021R3"&gt;Filling Holes in Class Template Argument Deduction&lt;/a&gt;, which proposes to allow CTAD for aggregates, alias templates, and inherited constructors.&lt;/p&gt; &lt;p&gt;&lt;a href="http://wg21.link/P0848R1"&gt;Conditionally Trivial Special Member Functions&lt;/a&gt;, which aims to allow a constructor with certain (Concepts) constraints to be trivial while a constructor with different constraints is not, and have whether the class is trivially copyable depend on which is selected for a particular instantiation of the class.&lt;/p&gt; &lt;p&gt;The &lt;a href="https://isocpp.org/std/meetings-and-participation/upcoming-meetings"&gt;next meeting&lt;/a&gt; will be in July in Cologne, Germany.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F11%2Freport-from-the-february-2019-iso-c-meeting-core-language-working-group%2F&amp;#38;linkname=Report%20from%20the%20February%202019%20ISO%20C%2B%2B%20meeting%20%28Core%20Language%20working%20group%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F11%2Freport-from-the-february-2019-iso-c-meeting-core-language-working-group%2F&amp;#38;linkname=Report%20from%20the%20February%202019%20ISO%20C%2B%2B%20meeting%20%28Core%20Language%20working%20group%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F11%2Freport-from-the-february-2019-iso-c-meeting-core-language-working-group%2F&amp;#38;linkname=Report%20from%20the%20February%202019%20ISO%20C%2B%2B%20meeting%20%28Core%20Language%20working%20group%29" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F11%2Freport-from-the-february-2019-iso-c-meeting-core-language-working-group%2F&amp;#38;linkname=Report%20from%20the%20February%202019%20ISO%20C%2B%2B%20meeting%20%28Core%20Language%20working%20group%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F11%2Freport-from-the-february-2019-iso-c-meeting-core-language-working-group%2F&amp;#38;linkname=Report%20from%20the%20February%202019%20ISO%20C%2B%2B%20meeting%20%28Core%20Language%20working%20group%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F11%2Freport-from-the-february-2019-iso-c-meeting-core-language-working-group%2F&amp;#38;linkname=Report%20from%20the%20February%202019%20ISO%20C%2B%2B%20meeting%20%28Core%20Language%20working%20group%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F11%2Freport-from-the-february-2019-iso-c-meeting-core-language-working-group%2F&amp;#38;linkname=Report%20from%20the%20February%202019%20ISO%20C%2B%2B%20meeting%20%28Core%20Language%20working%20group%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F11%2Freport-from-the-february-2019-iso-c-meeting-core-language-working-group%2F&amp;#38;linkname=Report%20from%20the%20February%202019%20ISO%20C%2B%2B%20meeting%20%28Core%20Language%20working%20group%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F11%2Freport-from-the-february-2019-iso-c-meeting-core-language-working-group%2F&amp;#038;title=Report%20from%20the%20February%202019%20ISO%20C%2B%2B%20meeting%20%28Core%20Language%20working%20group%29" data-a2a-url="https://developers.redhat.com/blog/2019/04/11/report-from-the-february-2019-iso-c-meeting-core-language-working-group/" data-a2a-title="Report from the February 2019 ISO C++ meeting (Core Language working group)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/04/11/report-from-the-february-2019-iso-c-meeting-core-language-working-group/"&gt;Report from the February 2019 ISO C++ meeting (Core Language working group)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/B5NlAvE2wug" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The February 2019 ISO C++ meeting was held in Kailua-Kona, Hawaii. As usual, Red Hat sent three developers to the meeting: I attended in the Core Language working group, Jonathan Wakely in Library, and Thomas Rodgers in SG1 (parallelism and concurrency). The meeting went smoothly, although there was significant uncertainty at the beginning where we [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/04/11/report-from-the-february-2019-iso-c-meeting-core-language-working-group/"&gt;Report from the February 2019 ISO C++ meeting (Core Language working group)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/04/11/report-from-the-february-2019-iso-c-meeting-core-language-working-group/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">582757</post-id><dc:creator>Jason Merrill</dc:creator><dc:date>2019-04-11T07:00:12Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/04/11/report-from-the-february-2019-iso-c-meeting-core-language-working-group/</feedburner:origLink></entry><entry><title>Red Hat Summit 2019: Emerging Technology Labs Roadmap</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/vHwefMy3BR8/red-hat-summit-2019-emerging-technology-labs-roadmap.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="Decision Manager" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="JBossAMQ" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_summit_2019_emerging_technology_labs_roadmap</id><updated>2019-04-11T05:00:06Z</updated><published>2019-04-11T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;a href="https://reg.summit.redhat.com/" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img border="0" data-original-height="389" data-original-width="769" height="161" src="https://1.bp.blogspot.com/-yX0WaXZmaTI/XJj8CSvWUlI/AAAAAAAAth4/4Z1aZQ7VOp061sKNZ-_kMauutZPP46AMgCLcBGAs/s320/Screenshot%2B2019-03-25%2Bat%2B17.04.08.png" width="320" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://www.redhat.com/en/summit/2019" target="_blank"&gt;Red Hat Summit 2019&lt;/a&gt; is rocking Boston, MA from May 7-9th in the &lt;a href="https://www.signatureboston.com/BCEC" target="_blank"&gt;Boston Convention and Exhibition Center&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Everything you need to know about the current state of open source enterprise ready software can be found at this event. From customers talking about their experiences leveraging open source in their solutions, to the creators of open source technologies you're using, and all the way down to hands-on lab experiences on these technologies.&lt;br /&gt;&lt;br /&gt;This hands-on appeal is what this series of articles is about. It's&amp;nbsp;interesting to take a tour, so starting with this article let's examine a series of instructor-led labs based on a specific theme.&lt;br /&gt;&lt;br /&gt;This week it's a roadmap to&amp;nbsp;&lt;i&gt;emerging technology&amp;nbsp;&lt;/i&gt;lab content.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;The following labs can be found in the &lt;a href="https://summit.redhat.com/conference/sessions" target="_blank"&gt;session catalog online&lt;/a&gt;, by searching on title or filtering on &lt;i&gt;instructor-led labs &lt;/i&gt;and &lt;i&gt;emerging technology.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Analytics and machine learning with Red Hat infrastructure&lt;/h3&gt;&lt;i&gt;As data is exponentially growing in organizations, there is an increasing need to consolidate silos of information into a single source of truth, or ‘Data Lake’ to feed hungry Analytics and Machine Learning Engines that can gather insight at scale.&lt;br /&gt;&lt;br /&gt;In this session, we'll detail how to architect data infrastructure services using Red Hat OpenShift, Red Hat Ceph Storage, and doing analytics with Spark and TensorFlow. In the hands-on segment of the lab, we'll deploy Open Data Hub and use Jupyter notebooks to walk through interacting with data sets using the S3A filesystem client and using Spark schema detection and SparkSQL to query data. We'll then look at how to use TensorFlow to create a model to classify data, how to integrate TensorFlow models and Spark, and at how to serve that data using Red Hat OpenShift.&lt;br /&gt;&lt;br /&gt;Speakers: Kyle Bader, Sean Pryor, Sherard Griffin&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Machine learning workflows for application developers&lt;/h3&gt;&lt;i&gt;The capabilities of intelligent applications often seem like magic to users, but the machine learning and artificial intelligence techniques that provide these features are more accessible than you might think. Developing intelligent features doesn’t require esoteric math or high-performance hardware, but it does require you to adapt your existing engineering practice to build and manage predictive models in addition to conventional software artifacts.&lt;br /&gt;&lt;br /&gt;This hands-on lab will introduce machine learning workflows and show you how to integrate them into the application development work you’re already doing, focusing on the habits and processes that will help you to get meaningful results from application intelligence. During this lab, Red Hat machine learning experts will help you:&lt;br /&gt;&lt;/i&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Build intelligent application functionality from the ground up, by training, evaluating, and deploying predictive models.&lt;/i&gt;&lt;/li&gt;&lt;i&gt;&lt;li&gt;Incorporate machine learning into your general software development discipline.&lt;/li&gt;&lt;li&gt;See how to apply techniques like continuous integration, iterative development, and monitoring while building intelligent features for your apps.&lt;/li&gt;&lt;li&gt;Learn how the development platforms you love, like Red Hat Middleware and Red Hat OpenShift Container Platform, support every phase of intelligent application development.&lt;/li&gt;&lt;/i&gt;&lt;/ul&gt;&lt;i&gt; Speakers: Sophie Watson, William Benton, Michael McCune&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Next-gen technologies at scale: Building solutions to manage tomorrow’s workloads&lt;/h3&gt;&lt;i&gt;For emerging technologies like Internet of Things (IoT), virtual reality (VR), and 5G, a large amount of data is generated outside the datacenter—for example, a refinery can generate 1TB data per day. A lot of this data is redundant, yet an event for critical equipment would require a near real-time response. This requires a large amount of data processing at the edge as well as reducing the data volume sent to datacenter or cloud.&lt;br /&gt;&lt;br /&gt;In this lab, you'll learn how to use a combination of Red Hat technologies, such as Red Hat Decision Manager, Red Hat AMQ streams, and Red hat OpenShift Container Platform to build integrated solutions to meet most demanding workloads. In particular, we'll cover using the features of AMQ streams—such as stream processing, metering, and event sourcing—to build solutions that scale for complex environments. Patterns used in this lab are designed to be extensible, so that you'll understand how to implement your own adaptive solutions afterwards.&lt;br /&gt;&lt;br /&gt;Speakers: Hugo Guerrero, Sam Rang, Andrew Block, Christina WeiMei Lin, Ishu Verma&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Stay tuned for more articles with insights into other themes that might interest you enough to register for one of these instructor-led labs at Red Hat Summit 2019.&lt;br /&gt;&lt;br /&gt;Looking forward to seeing you there!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ekpEuv92s5s:0QowWOhTnA0:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ekpEuv92s5s:0QowWOhTnA0:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ekpEuv92s5s:0QowWOhTnA0:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ekpEuv92s5s:0QowWOhTnA0:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ekpEuv92s5s:0QowWOhTnA0:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ekpEuv92s5s:0QowWOhTnA0:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ekpEuv92s5s:0QowWOhTnA0:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ekpEuv92s5s:0QowWOhTnA0:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ekpEuv92s5s:0QowWOhTnA0:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ekpEuv92s5s:0QowWOhTnA0:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ekpEuv92s5s:0QowWOhTnA0:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/ekpEuv92s5s" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/vHwefMy3BR8" height="1" width="1" alt=""/&gt;</content><summary>Red Hat Summit 2019 is rocking Boston, MA from May 7-9th in the Boston Convention and Exhibition Center. Everything you need to know about the current state of open source enterprise ready software can be found at this event. From customers talking about their experiences leveraging open source in their solutions, to the creators of open source technologies you're using, and all the way down to ha...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-04-11T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/ekpEuv92s5s/red-hat-summit-2019-emerging-technology-labs-roadmap.html</feedburner:origLink></entry><entry><title>Speed up SystemTap scripts with statistical aggregates</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/V__s_JRkjM4/" /><category term="Performance" /><category term="Programming Languages" /><category term="developer" /><category term="performance" /><category term="tutorial" /><author><name>William Cohen</name></author><id>https://developers.redhat.com/blog/?p=519607</id><updated>2019-04-10T13:30:46Z</updated><published>2019-04-10T13:30:46Z</published><content type="html">&lt;p&gt;A common question that SystemTap can be used to answer involves how often particular events occur on the system. Some events, such as system calls, can happen frequently and the goal is to make the SystemTap script as efficient as possible.&lt;/p&gt; &lt;p&gt;Using the statistical aggregate in the place of regular integers is one way to improve the performance of SystemTap scripts. The statistical aggregates record data on a per-CPU basis to reduce the amount of coordination required between processors, allowing information to be recorded with less overhead. In this article, I’ll show an example of how to reduce overhead in SystemTap scripts.&lt;span id="more-519607"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Below is a version of the &lt;code&gt;syscalls_by_proc.stp&lt;/code&gt; example script that tallies the number of times each executable makes a system call. When the script exits, it prints out the number of times each executable on the system make a system call sorted from most to fewest system calls.&lt;/p&gt; &lt;p&gt;Line 1 defines the global array used to store the information. Line 3 is the probe that actually tallies each system call using the &lt;code&gt;++&lt;/code&gt;. The probe end starting at line 5 prints out the data stored in the global syscalls associative array.&lt;/p&gt; &lt;pre&gt;global syscalls probe kernel.trace("sys_enter") { syscalls[execname()] ++ } probe end { printf ("%-10s %-s\n", "#SysCalls", "Process Name") foreach (proc in syscalls-) printf("%-10d %-s\n", syscalls[proc], proc) }&lt;/pre&gt; &lt;p&gt;The following code example shows a run of the previous script. The &lt;code&gt;-v&lt;/code&gt; option causes SystemTap to provide timing information for each of the five passes passes. The &lt;code&gt;-t&lt;/code&gt; provides timing information for each of the probes in the script and will provide a way to compare the efficiency of the different implementations. The &lt;code&gt;-c "make -j8"&lt;/code&gt; starts the make command once the SystemTap instrumentation is ready and stops the instrumentation once the command finishes. At the end of the output is the &amp;#8220;probe hit report,&amp;#8221; which provides information about the overhead of the various probes.&lt;/p&gt; &lt;p&gt;The middle of line for the &lt;code&gt;kernel.trace("raw_syscalls:sys_enter")&lt;/code&gt; shows it was triggered more than 24 million times. The middle of that same line states it took an average of 4224 clock cycles to do the operation. Also over 3 million lock contentions occur on the global associative array &lt;code&gt;(__global_syscall)&lt;/code&gt; in the &amp;#8220;refresh report&amp;#8221; section.&lt;/p&gt; &lt;pre&gt;$ stap -v -t ~/present/2019blog/fast/syscalls_by_proc.stp -c "make -j8" Pass 1: parsed user script and 504 library scripts using 290680virt/85620res/3552shr/82780data kb, in 590usr/30sys/621real ms. Pass 2: analyzed script: 2 probes, 1 function, 0 embeds, 1 global using 296352virt/92244res/4484shr/88452data kb, in 130usr/190sys/331real ms. Pass 3: using cached /home/wcohen/.systemtap/cache/b8/stap_b8412b9e49934149b789a69c3e2a2b4e_1469.c Pass 4: using cached /home/wcohen/.systemtap/cache/b8/stap_b8412b9e49934149b789a69c3e2a2b4e_1469.ko Pass 5: starting run. DESCEND objtool CALL scripts/atomic/check-atomics.sh CALL scripts/checksyscalls.sh CHK include/generated/compile.h TEST posttest Building modules, stage 2. MODPOST 3484 modules arch/x86/tools/insn_decoder_test: success: Decoded and checked 5057175 instructions TEST posttest arch/x86/tools/insn_sanity: Success: decoded and checked 1000000 random instructions with 0 errors (seed:0x18e55059) Kernel: arch/x86/boot/bzImage is ready (#9) #SysCalls Process Name 22614118 make 1675055 sh 138647 awk 112797 modpost 93456 cat 69563 objdump 68771 insn_decoder_te 49887 grep 14656 cc1 13544 gcc 11714 rm 10174 as ... ----- probe hit report: kernel.trace("raw_syscalls:sys_enter"), (/home/wcohen/present/2019blog/fast/syscalls_by_proc.stp:17:1), hits: 24894191, cycles: 310min/4224avg/477851max, variance: 5282267, from: kernel.trace("sys_enter"), index: 0 end, (/home/wcohen/present/2019blog/fast/syscalls_by_proc.stp:21:1), hits: 1, cycles: 109027min/109027avg/109027max, variance: 0, from: end, index: 1 ----- refresh report: '__global_syscalls' lock contention occurred 3230491 times Pass 5: run completed in 174200usr/100470sys/69766real ms. &lt;/pre&gt; &lt;p&gt;The overhead of the script can be significantly reduce by using statistical aggregates. The &lt;code&gt;++&lt;/code&gt; is replaced by a &lt;code&gt;&amp;#60;&amp;#60;&amp;#60; 1&lt;/code&gt; to tally each system call and the tallies are now printed with a &lt;code&gt;@sum(syscalls[proc])&lt;/code&gt; in the code below.&lt;/p&gt; &lt;pre&gt;global syscalls probe kernel.trace("sys_enter") { syscalls[execname()] &amp;#38;lt;&amp;#38;lt;&amp;#38;lt; 1 } probe end { printf ("%-10s %-s\n", "#SysCalls", "Process Name") foreach (proc in syscalls-) printf("%-10d %-s\n", @sum(syscalls[proc]), proc) } &lt;/pre&gt; &lt;p&gt;Below is an equivalent run of the script using the statistical aggregates in place of the slower &lt;code&gt;++&lt;/code&gt;. Looking at the &amp;#8220;probe hit report&amp;#8221; toward the end of the listing, you will see there the &lt;code&gt;raw_syscalls:sys_enter&lt;/code&gt; trace point was run a similar number of times as the other script, about 25 million times. However, notice that the average time required by the handler is 409 clock cycles, much lower that the 4224 cycles observed on the version with &lt;code&gt;++&lt;/code&gt;. There is no lock contention listed for the syscalls associative array listed in the &amp;#8220;refresh report&amp;#8221; section for the run using statistical aggregates either.&lt;/p&gt; &lt;pre&gt;$ stap -v -t ~/present/2019blog/faster/syscalls_by_proc.stp -c "make -j8" Pass 1: parsed user script and 504 library scripts using 290680virt/85624res/3552shr/82780data kb, in 580usr/30sys/616real ms. Pass 2: analyzed script: 2 probes, 1 function, 0 embeds, 1 global using 296348virt/92256res/4492shr/88448data kb, in 140usr/190sys/332real ms. Pass 3: using cached /home/wcohen/.systemtap/cache/de/stap_de5d5dc935de72aac43603205a17cad4_1482.c Pass 4: using cached /home/wcohen/.systemtap/cache/de/stap_de5d5dc935de72aac43603205a17cad4_1482.ko Pass 5: starting run. DESCEND objtool CALL scripts/atomic/check-atomics.sh CALL scripts/checksyscalls.sh CHK include/generated/compile.h TEST posttest Building modules, stage 2. MODPOST 3484 modules arch/x86/tools/insn_decoder_test: success: Decoded and checked 5057175 instructions TEST posttest arch/x86/tools/insn_sanity: Success: decoded and checked 1000000 random instructions with 0 errors (seed:0xbefec711) Kernel: arch/x86/boot/bzImage is ready (#9) #SysCalls Process Name 22616433 make 1675055 sh 138647 awk 112797 modpost 93456 cat 69563 objdump 68771 insn_decoder_te 49891 grep 14706 cc1 13544 gcc 11714 rm 10174 as ... ----- probe hit report: kernel.trace("raw_syscalls:sys_enter"), (/home/wcohen/present/2019blog/faster/syscalls_by_proc.stp:17:1), hits: 24895995, cycles: 216min/409avg/395696max, variance: 3425671, from: kernel.trace("sys_enter"), index: 0 end, (/home/wcohen/present/2019blog/faster/syscalls_by_proc.stp:19:1), hits: 1, cycles: 847759min/847759avg/847759max, variance: 0, from: end, index: 1 ----- refresh report: Pass 5: run completed in 172780usr/66010sys/64215real ms. &lt;/pre&gt; &lt;p&gt;The tradeoff of using the statistical aggregates is that when using the &lt;code&gt;@sum()&lt;/code&gt; is that the data needs to be fetched from all the processors in the machine. This is more expensive than just fetching a single integer value stored in an associative array. However, for this example, reducing the overhead of the system call probes more than makes up for the overhead of &lt;code&gt;@sum()&lt;/code&gt; used to print the results.&lt;/p&gt; &lt;p&gt;When writing SystemTap scripts, you can use the &lt;code&gt;-t&lt;/code&gt; option to better understand the overhead of your scripts and consider using the statistical aggregates when feasible. As this example shows, the overhead in instrumentation scripts can be significantly reduced in SystemTap scripts.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F10%2Fspeed-up-systemtap-scripts-with-statistical-aggregates%2F&amp;#38;linkname=Speed%20up%20SystemTap%20scripts%20with%20statistical%20aggregates" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F10%2Fspeed-up-systemtap-scripts-with-statistical-aggregates%2F&amp;#38;linkname=Speed%20up%20SystemTap%20scripts%20with%20statistical%20aggregates" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F10%2Fspeed-up-systemtap-scripts-with-statistical-aggregates%2F&amp;#38;linkname=Speed%20up%20SystemTap%20scripts%20with%20statistical%20aggregates" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F10%2Fspeed-up-systemtap-scripts-with-statistical-aggregates%2F&amp;#38;linkname=Speed%20up%20SystemTap%20scripts%20with%20statistical%20aggregates" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F10%2Fspeed-up-systemtap-scripts-with-statistical-aggregates%2F&amp;#38;linkname=Speed%20up%20SystemTap%20scripts%20with%20statistical%20aggregates" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F10%2Fspeed-up-systemtap-scripts-with-statistical-aggregates%2F&amp;#38;linkname=Speed%20up%20SystemTap%20scripts%20with%20statistical%20aggregates" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F10%2Fspeed-up-systemtap-scripts-with-statistical-aggregates%2F&amp;#38;linkname=Speed%20up%20SystemTap%20scripts%20with%20statistical%20aggregates" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F10%2Fspeed-up-systemtap-scripts-with-statistical-aggregates%2F&amp;#38;linkname=Speed%20up%20SystemTap%20scripts%20with%20statistical%20aggregates" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F10%2Fspeed-up-systemtap-scripts-with-statistical-aggregates%2F&amp;#038;title=Speed%20up%20SystemTap%20scripts%20with%20statistical%20aggregates" data-a2a-url="https://developers.redhat.com/blog/2019/04/10/speed-up-systemtap-scripts-with-statistical-aggregates/" data-a2a-title="Speed up SystemTap scripts with statistical aggregates"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/04/10/speed-up-systemtap-scripts-with-statistical-aggregates/"&gt;Speed up SystemTap scripts with statistical aggregates&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/V__s_JRkjM4" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;A common question that SystemTap can be used to answer involves how often particular events occur on the system. Some events, such as system calls, can happen frequently and the goal is to make the SystemTap script as efficient as possible. Using the statistical aggregate in the place of regular integers is one way to [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/04/10/speed-up-systemtap-scripts-with-statistical-aggregates/"&gt;Speed up SystemTap scripts with statistical aggregates&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/04/10/speed-up-systemtap-scripts-with-statistical-aggregates/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">519607</post-id><dc:creator>William Cohen</dc:creator><dc:date>2019-04-10T13:30:46Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/04/10/speed-up-systemtap-scripts-with-statistical-aggregates/</feedburner:origLink></entry><entry><title>Eclipse Wild Web Developer adds a powerful YAML editor with built-in Kubernetes support</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/uZ86P9aeE2g/" /><category term="Announcement" /><category term="Developer Tools" /><category term="Kubernetes" /><category term="Eclipse" /><category term="kubernetes" /><author><name>Xi Yan</name></author><id>https://developers.redhat.com/blog/?p=580147</id><updated>2019-04-10T07:03:02Z</updated><published>2019-04-10T07:03:02Z</published><content type="html">&lt;p&gt;YAML Ain&amp;#8217;t Markup Language (YAML) has grown increasingly popular during the past few years. It is a human-readable text-based format for specifying configuration information and is used in many platforms, such as &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; and &lt;a href="https://www.openshift.com/"&gt;Red Hat OpenShift&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a href="https://marketplace.eclipse.org/content/eclipse-wild-web-developer-web-development-eclipse-ide"&gt;Eclipse Wild Web Developer&lt;/a&gt; is a language-based extension that provides a rich development experience for developing typical web and configuration files in the Eclipse IDE. According to the &lt;a href="https://projects.eclipse.org/proposals/eclipse-wild-web-developer"&gt;project page&lt;/a&gt;, &amp;#8220;Eclipse Wild Web Developer relies on existing mainstream and maintained components to provide the language smartness, over popular configuration files like TextMate and protocols like &lt;a href="https://microsoft.github.io/language-server-protocol/"&gt;Language Server Protocol &lt;/a&gt; or Debug Adapter Protocol.&amp;#8221;&lt;/p&gt; &lt;p&gt;Recently, the &lt;a href="https://github.com/redhat-developer/yaml-language-server"&gt;YAML Language Server&lt;/a&gt; has been integrated into Eclipse Wild Web Developer. This is a feature-rich YAML Language Server implementation that also powers editors including VSCode, Eclipse Che, and Atom. This integration brings all the features that Language Server supports, including validation, autocompletion, hover support, and document outlining to the Eclipse Generic Editor, making it much easier to write and maintain YAML files.&lt;span id="more-580147"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;To get these features, you can download the &lt;a href="https://marketplace.eclipse.org/content/eclipse-wild-web-developer-web-development-eclipse-ide"&gt;Wild Web Developer&lt;/a&gt; in the Eclipse Marketplace.&lt;/p&gt; &lt;h3&gt;Demo&lt;/h3&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/P9ETtuHiUco?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;General YAML support&lt;/h3&gt; &lt;p&gt;If you open any &lt;code&gt;.yaml&lt;/code&gt; or &lt;code&gt;.yml&lt;/code&gt; file with the Eclipse Generic Editor with Wild Web Developer installed, you&amp;#8217;ll find it has all the features you&amp;#8217;d expect to find in a language based editor, including:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Syntax highlighting&lt;/li&gt; &lt;li&gt;YAML validation&lt;/li&gt; &lt;li&gt;Document outlining&lt;/li&gt; &lt;li&gt;Formatting&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Built-in Kubernetes and custom schemas support&lt;/h3&gt; &lt;p&gt;In addition to general YAML support, Wild Web Developer provides built-in Kubernetes syntax support, as well as support for validation for custom schemas through the YAML Language Server.&lt;/p&gt; &lt;p&gt;Out of the box, the YAML Language server will automatically check SchemaStore to provide syntax, structure, and value validation based on a matching schema. You may also manually associate schemas to your YAML files by going to &lt;em&gt;Preferences -&amp;#62; YAML -&amp;#62; YAML Schemas&lt;/em&gt; and adding the corresponding schemas.&lt;/p&gt; &lt;p&gt;In the &lt;em&gt;Schema&lt;/em&gt; section, you may specify built-in Kubernetes definitions, such as &amp;#8220;kubernetes&amp;#8221; or &amp;#8220;kedge,&amp;#8221; or any URLs pointing to a valid schema. The &lt;em&gt;Glob Pattern&lt;/em&gt; parameter is used to match the schemas to a file path. For example, you can specify it as /* to apply the schema to all YAML files in the project, or use the flexibility to specify different schemas for different files or directories.&lt;/p&gt; &lt;p&gt;Once this is done, you can access all the schema-related features like:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Autocompletion: autocompletes properties or node values to schema&amp;#8217;s default&lt;/li&gt; &lt;li&gt;Hovers: hovering over a property shows a description&lt;/li&gt; &lt;li&gt;Schema validation: validating structure and values of your file against the schema&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Contributing&lt;/h3&gt; &lt;p&gt;If you are a developer working with YAML files or any typical web languages, then check out Wild Web Developer and see how it compares to your current workflow. If you would like to contribute, feel free to submit any issues, pull requests, or comments at: &lt;a href="https://github.com/eclipse/wildwebdeveloper"&gt;https://github.com/eclipse/wildwebdeveloper&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F10%2Feclipse-wild-web-developer-adds-a-powerful-yaml-editor-with-built-in-kubernetes-support%2F&amp;#38;linkname=Eclipse%20Wild%20Web%20Developer%20adds%20a%20powerful%20YAML%20editor%20with%20built-in%20Kubernetes%20support" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F10%2Feclipse-wild-web-developer-adds-a-powerful-yaml-editor-with-built-in-kubernetes-support%2F&amp;#38;linkname=Eclipse%20Wild%20Web%20Developer%20adds%20a%20powerful%20YAML%20editor%20with%20built-in%20Kubernetes%20support" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F10%2Feclipse-wild-web-developer-adds-a-powerful-yaml-editor-with-built-in-kubernetes-support%2F&amp;#38;linkname=Eclipse%20Wild%20Web%20Developer%20adds%20a%20powerful%20YAML%20editor%20with%20built-in%20Kubernetes%20support" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F10%2Feclipse-wild-web-developer-adds-a-powerful-yaml-editor-with-built-in-kubernetes-support%2F&amp;#38;linkname=Eclipse%20Wild%20Web%20Developer%20adds%20a%20powerful%20YAML%20editor%20with%20built-in%20Kubernetes%20support" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F10%2Feclipse-wild-web-developer-adds-a-powerful-yaml-editor-with-built-in-kubernetes-support%2F&amp;#38;linkname=Eclipse%20Wild%20Web%20Developer%20adds%20a%20powerful%20YAML%20editor%20with%20built-in%20Kubernetes%20support" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F10%2Feclipse-wild-web-developer-adds-a-powerful-yaml-editor-with-built-in-kubernetes-support%2F&amp;#38;linkname=Eclipse%20Wild%20Web%20Developer%20adds%20a%20powerful%20YAML%20editor%20with%20built-in%20Kubernetes%20support" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F10%2Feclipse-wild-web-developer-adds-a-powerful-yaml-editor-with-built-in-kubernetes-support%2F&amp;#38;linkname=Eclipse%20Wild%20Web%20Developer%20adds%20a%20powerful%20YAML%20editor%20with%20built-in%20Kubernetes%20support" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F10%2Feclipse-wild-web-developer-adds-a-powerful-yaml-editor-with-built-in-kubernetes-support%2F&amp;#38;linkname=Eclipse%20Wild%20Web%20Developer%20adds%20a%20powerful%20YAML%20editor%20with%20built-in%20Kubernetes%20support" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F04%2F10%2Feclipse-wild-web-developer-adds-a-powerful-yaml-editor-with-built-in-kubernetes-support%2F&amp;#038;title=Eclipse%20Wild%20Web%20Developer%20adds%20a%20powerful%20YAML%20editor%20with%20built-in%20Kubernetes%20support" data-a2a-url="https://developers.redhat.com/blog/2019/04/10/eclipse-wild-web-developer-adds-a-powerful-yaml-editor-with-built-in-kubernetes-support/" data-a2a-title="Eclipse Wild Web Developer adds a powerful YAML editor with built-in Kubernetes support"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/04/10/eclipse-wild-web-developer-adds-a-powerful-yaml-editor-with-built-in-kubernetes-support/"&gt;Eclipse Wild Web Developer adds a powerful YAML editor with built-in Kubernetes support&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/uZ86P9aeE2g" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;YAML Ain&amp;#8217;t Markup Language (YAML) has grown increasingly popular during the past few years. It is a human-readable text-based format for specifying configuration information and is used in many platforms, such as Kubernetes and Red Hat OpenShift. Eclipse Wild Web Developer is a language-based extension that provides a rich development experience for developing typical web [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/04/10/eclipse-wild-web-developer-adds-a-powerful-yaml-editor-with-built-in-kubernetes-support/"&gt;Eclipse Wild Web Developer adds a powerful YAML editor with built-in Kubernetes support&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/04/10/eclipse-wild-web-developer-adds-a-powerful-yaml-editor-with-built-in-kubernetes-support/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">580147</post-id><dc:creator>Xi Yan</dc:creator><dc:date>2019-04-10T07:03:02Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/04/10/eclipse-wild-web-developer-adds-a-powerful-yaml-editor-with-built-in-kubernetes-support/</feedburner:origLink></entry></feed>
